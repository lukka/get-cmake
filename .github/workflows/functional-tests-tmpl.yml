name: Run and validate installed tools versions.

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      experimental:
        required: false
        type: boolean
        default: false
      versions:
        type: string
    secrets:
      token:
        required: true

jobs:
  test_user_provided_versions:
    name: '${{ matrix.os }}: functional test (${{ matrix.versions }})'
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ inputs.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.runs-on) }}
        versions: ${{ fromJson(inputs.versions) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        token: ${{ github.token }}
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - uses: ./
      name: validation test by running get-cmake with specific input
      with:
        cmakeVersion: ${{ fromJSON(matrix.versions).cmake }}
        ninjaVersion: ${{ fromJSON(matrix.versions).ninja }}
    - name: CMake version check ${{ fromJSON(matrix.versions).cmake }}
      run: |
        which cmake
        cmake --version
        CMAKE_VER="$(cmake --version)"
        CMAKE_REQUESTED_VER="${{ fromJSON(matrix.versions).cmake }}"
        case ${CMAKE_REQUESTED_VER} in
          'latest')
            EXPECTED_CMAKE_VER=`cat .latest_cmake_version`
            ;;
          'latestrc')
            EXPECTED_CMAKE_VER=`cat .latestrc_cmake_version`
            ;;
          \~*)
            # Drop initial ~
            CMAKE_REQUESTED_VER=${CMAKE_REQUESTED_VER:1}
            # Drop ".patch"
            EXPECTED_CMAKE_VER="${CMAKE_REQUESTED_VER%.*}"
            ;;
          \^*)
            # Drop initial ^
            CMAKE_REQUESTED_VER=${CMAKE_REQUESTED_VER:1}
            # Drop ".minor.patch"
            EXPECTED_CMAKE_VER="${CMAKE_REQUESTED_VER%.*.*}"
            ;;
          *)
            # Expect the required version as is.
            EXPECTED_CMAKE_VER="${CMAKE_REQUESTED_VER}"
            ;;
        esac
        if ! [[ "$CMAKE_VER" =~ .*${EXPECTED_CMAKE_VER}.* ]]; then
          echo "ASSERTION FAILED! Instead of '${EXPECTED_CMAKE_VER}', found: "
          echo "$CMAKE_VER"
          exit -1
        fi
      shell: bash
    - name: ninja version check ${{ fromJSON(matrix.versions).ninja }}
      run: |
        which ninja
        ninja --version
        NINJA_VER="$(ninja --version)"
        NINJA_REQUESTED_VER="${{ fromJSON(matrix.versions).ninja }}"
        case ${NINJA_REQUESTED_VER} in
          'latest')
            EXPECTED_NINJA_VER=`cat .latest_ninja_version`
            ;;
          \~*)
            # Drop initial ~
            NINJA_REQUESTED_VER=${NINJA_REQUESTED_VER:1}
            # Drop ".patch"
            EXPECTED_NINJA_VER="${NINJA_REQUESTED_VER%.*}"
            ;;
          \^*)
            # Drop initial ~
            NINJA_REQUESTED_VER=${NINJA_REQUESTED_VER:1}
            # Drop ".minor.patch"
            EXPECTED_NINJA_VER="${NINJA_REQUESTED_VER%.*.*}"
            ;;
          *)
            EXPECTED_NINJA_VER="${NINJA_REQUESTED_VER}"
            ;;
        esac
        if ! [[ "$NINJA_VER" =~ .*${EXPECTED_NINJA_VER}.* ]]; then
          echo "ASSERTION FAILED! Instead of '${EXPECTED_NINJA_VER}', found: "
          echo "$NINJA_VER"
          exit -1
        fi
      shell: bash
