name: Build, test, validate

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      generate-catalog:
        required: true
        type: boolean
    secrets:
      token:
        required: true

jobs:
  build_and_test:
    name: '${{ matrix.os }}: build and test'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.runs-on) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        ssh-key: ${{ secrets.token }}
    - uses: actions/download-artifact@v4
      with:
        name: catalog
      if: inputs.generate-catalog != true
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - run: npm install
    - run: npm run generate-catalog
      env:
        GITHUB_TOKEN: ${{ github.token }}
      if: inputs.generate-catalog == true
    - run: npm run test
    - uses: ./
      name: validation test by running get-cmake
    - name: CMake version check
      run: |
        which cmake
        cmake --version
        CMAKE_LATEST=`cat .latest_cmake_version`
        CMAKE_VER="$(cmake --version)"
        if ! [[ "$CMAKE_VER" =~ .*"${CMAKE_LATEST}".* ]]; then
          echo "ASSERTION FAILED! Instead of '${CMAKE_LATEST}', found: "
          echo "$CMAKE_VER"
          exit -1
        fi
      shell: bash
    - name: ninja version check
      run: |
        which ninja
        ninja --version
        NINJA_LATEST=`cat .latest_ninja_version`
        NINJA_VER="$(ninja --version)"
        if ! [[ "$NINJA_VER" =~ .*"${NINJA_LATEST}".* ]]; then
          echo "ASSERTION FAILED! Instead of '${NINJA_LATEST}', found: "
          echo "$NINJA_VER"
          exit -1
        fi
      shell: bash
    - uses: actions/upload-artifact@v4
      with:
        name: catalog
        path: |
          .latest_ninja_version
          .latest_cmake_version
          src/releases-catalog.ts
      if: inputs.generate-catalog == true

    - name: If there is a new CMake version, create a Git commit for the PR
      id: git-check
      run: |
        if ! git diff --exit-code .latest_cmake_version ; then
          export CMAKE_NEW_VERSIONS=cmake-v$(cat .latest_cmake_version)
        fi
        if ! git diff --exit-code .latestrc_cmake_version ; then
          export CMAKE_NEW_VERSIONS="${CMAKE_NEW_VERSIONS} cmake-rc-v$(cat .latestrc_cmake_version)"
        fi
        if [[ -n "${CMAKE_NEW_VERSIONS}" ]]; then
          # Get rid of leading space if any
          CMAKE_NEW_VERSIONS="${CMAKE_NEW_VERSIONS## }"
          echo "CMAKE_NEW_VERSIONS=${CMAKE_NEW_VERSIONS}" >> "$GITHUB_ENV"
          git add -u
          git commit -m "New CMake version(s): $CMAKE_NEW_VERSIONS"
          echo "createpr=true" >> $GITHUB_OUTPUT
        else
          echo "There is no new version of CMake."
        fi
      if: ${{ inputs.generate-catalog == true }}

    - name: Create the PR for new CMake version(s)
      uses: peter-evans/create-pull-request@v6
      with:
        title: '[Automated] Adding ${{ env.CMAKE_NEW_VERSIONS }}'
        body: "Add to catalog new CMake version(s): ${{ env.CMAKE_NEW_VERSIONS }}"
        draft: true
        branch: automated-pr-cmake-${{ env.CMAKE_NEW_VERSIONS}}
        base: main
        add-paths: |
            dist/*.js
            .latest_cmake_version
            .latestrc_cmake_version
      if: ${{ (steps.git-check.outputs.createpr == 'true') }}
