name: Build, test, validate

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      generate-catalog:
        required: true
        type: boolean
    secrets:
      token:
        required: true

jobs:
  build_and_test:
    name: '${{ matrix.os }}: build and test'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.runs-on) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: actions/download-artifact@v3
      with:
        name: catalog
      if: inputs.generate-catalog != true
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - run: npm install
    - run: npm run generate-catalog
      env:
        GITHUB_TOKEN: ${{ github.token }}
      if: inputs.generate-catalog == true
    - run: npm run test
      if: false
    - uses: ./
      name: validation test by running get-cmake
      if: false
    - name: CMake version check
      run: |
        which cmake
        cmake --version
        CMAKE_LATEST=`cat .latest_cmake_version`
        CMAKE_VER="$(cmake --version)"
        if ! [[ "$CMAKE_VER" =~ .*"${CMAKE_LATEST}".* ]]; then
          echo "ASSERTION FAILED! Instead of '${CMAKE_LATEST}', found: "
          echo "$CMAKE_VER"
          exit -1
        fi
      shell: bash
      if: false
    - name: ninja version check
      run: |
        which ninja
        ninja --version
        NINJA_LATEST=`cat .latest_ninja_version`
        NINJA_VER="$(ninja --version)"
        if ! [[ "$NINJA_VER" =~ .*"${NINJA_LATEST}".* ]]; then
          echo "ASSERTION FAILED! Instead of '${NINJA_LATEST}', found: "
          echo "$NINJA_VER"
          exit -1
        fi
      shell: bash
      if: false
    - uses: actions/upload-artifact@v3
      with:
        name: catalog
        path: |
          .latest_ninja_version
          .latest_cmake_version
          src/releases-catalog.ts
      if: inputs.generate-catalog == true && false

    - name: Check if there is a new CMake version
      id: git-check
      #run: echo "modified=$(if [ -n "$(git status --porcelain)" ]; then echo "true"; else echo "false"; fi)" >> $GITHUB_OUTPUT
      run: echo "modified=$(echo 'true')" >> $GITHUB_OUTPUT
      if: ${{ inputs.generate-catalog == true }}

    - name: Create commit for PR for new version
      id: input-pr
      run: |
        pwd
        echo "TEST" >> .latest_cmake_version
        export CMAKE_VERSION_FOR_PR=$(cat .latest_cmake_version)
        echo "CMAKE_VERSION_FOR_PR=${CMAKE_VERSION_FOR_PR}" >> "$GITHUB_ENV"
        echo "Creating commit for CMake version: '$CMAKE_VERSION_FOR_PR' ."
        git add -u
        git commit -m 'CMake version $CMAKE_VERSION_FOR_PR'
      if: ${{ (steps.git-check.outputs.modified == 'true') && (inputs.generate-catalog == true) }}

    - name: Create PR for new CMake version
      uses: peter-evans/create-pull-request@v5
      with:
        title: ${{ env.CMAKE_VERSION_FOR_PR }}
        draft: true
        token: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ (steps.git-check.outputs.modified == 'true') && (inputs.generate-catalog == true) }}
